{
  "ver": "1.0.25",
  "uuid": "c428e162-9aa1-4b71-8e0d-2e95a3a07c46",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float angle;\nuniform float xBot;\nuniform float xTop;\nvec2 getBeginPos() {\n  vec2 uv = v_uv0;\n  float rad = radians(angle);\n  if (abs(xBot - xTop) < 0.001) {\n    float px = xTop;\n    float py = uv.y;\n    float xx = (uv.x - px) / cos(rad) + xTop;\n    float yy = uv.y;\n    return vec2(xx, yy);\n  }\n  float xBT = 1.0 / (xBot - xTop);\n  float px = (uv.y / xBT + xTop + uv.x) / 2.0;\n  float py = xBT * (px - xTop);\n  float f1 = uv.x - px - xBT * (uv.y - py);\n  float f2 = cos(rad) * (1.0 + xBT * xBT);\n  float xx = f1 / f2 + px;\n  float yy = py - (xx - px) * xBT;\n  return vec2(xx, yy);\n}\nvoid main () {\n  vec4 myC = vec4(0, 0, 0, 0);\n  float slope = 1.0 / (xBot - xTop);\n  float xMax = max(xBot, xTop);\n  float xMin = min(xBot, xTop);\n  if (v_uv0.y == (v_uv0.x - xTop) * slope) {\n    gl_FragColor = vec4(1, 1, 1, 1);\n    return;\n  }\n  vec4 myC1 = vec4(0, 0, 0, 0);\n  if (v_uv0.x > xMax) {\n  } else if(v_uv0.x < xMin) {\n    myC1 = texture2D(texture, v_uv0);\n  } else if (xTop > xBot) {\n    if(v_uv0.y > (v_uv0.x - xTop) * slope){\n    } else {\n      myC1 = texture2D(texture, v_uv0);\n    }\n  } else if (xTop < xBot) {\n    if(v_uv0.y < (v_uv0.x - xTop) * slope){\n    } else {\n      myC1 = texture2D(texture, v_uv0);\n    }\n  }\n  vec4 myC2 = vec4(0, 0, 0, 0);\n  vec2 uv = getBeginPos();\n  if (uv.x > 1.0 || uv.y > 1.0 || uv.x < 0.0 || uv.y < 0.0) {\n  } else if (uv.x > xMax) {\n    myC2 = texture2D(texture, uv);\n  } else if(uv.x < xMin) {\n  } else if (xTop > xBot) {\n    if(uv.y > (uv.x - xTop) * slope){\n      myC2 = texture2D(texture, uv);\n    } else {\n    }\n  } else if (xTop < xBot) {\n    if(uv.y < (uv.x - xTop) * slope){\n      myC2 = texture2D(texture, uv);\n    } else {\n    }\n  }\n  gl_FragColor = vec4(myC2 * myC2.a+ myC1 * (1.0 - myC2.a));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform IN_PUT_VALUE {\n  float angle;\n  float xBot;\n  float xTop;\n};\nvec2 getBeginPos() {\n  vec2 uv = v_uv0;\n  float rad = radians(angle);\n  if (abs(xBot - xTop) < 0.001) {\n    float px = xTop;\n    float py = uv.y;\n    float xx = (uv.x - px) / cos(rad) + xTop;\n    float yy = uv.y;\n    return vec2(xx, yy);\n  }\n  float xBT = 1.0 / (xBot - xTop);\n  float px = (uv.y / xBT + xTop + uv.x) / 2.0;\n  float py = xBT * (px - xTop);\n  float f1 = uv.x - px - xBT * (uv.y - py);\n  float f2 = cos(rad) * (1.0 + xBT * xBT);\n  float xx = f1 / f2 + px;\n  float yy = py - (xx - px) * xBT;\n  return vec2(xx, yy);\n}\nvoid main () {\n  vec4 myC = vec4(0, 0, 0, 0);\n  float slope = 1.0 / (xBot - xTop);\n  float xMax = max(xBot, xTop);\n  float xMin = min(xBot, xTop);\n  if (v_uv0.y == (v_uv0.x - xTop) * slope) {\n    gl_FragColor = vec4(1, 1, 1, 1);\n    return;\n  }\n  vec4 myC1 = vec4(0, 0, 0, 0);\n  if (v_uv0.x > xMax) {\n  } else if(v_uv0.x < xMin) {\n    myC1 = texture2D(texture, v_uv0);\n  } else if (xTop > xBot) {\n    if(v_uv0.y > (v_uv0.x - xTop) * slope){\n    } else {\n      myC1 = texture2D(texture, v_uv0);\n    }\n  } else if (xTop < xBot) {\n    if(v_uv0.y < (v_uv0.x - xTop) * slope){\n    } else {\n      myC1 = texture2D(texture, v_uv0);\n    }\n  }\n  vec4 myC2 = vec4(0, 0, 0, 0);\n  vec2 uv = getBeginPos();\n  if (uv.x > 1.0 || uv.y > 1.0 || uv.x < 0.0 || uv.y < 0.0) {\n  } else if (uv.x > xMax) {\n    myC2 = texture2D(texture, uv);\n  } else if(uv.x < xMin) {\n  } else if (xTop > xBot) {\n    if(uv.y > (uv.x - xTop) * slope){\n      myC2 = texture2D(texture, uv);\n    } else {\n    }\n  } else if (xTop < xBot) {\n    if(uv.y < (uv.x - xTop) * slope){\n      myC2 = texture2D(texture, uv);\n    } else {\n    }\n  }\n  gl_FragColor = vec4(myC2 * myC2.a+ myC1 * (1.0 - myC2.a));\n}"
      }
    }
  ],
  "subMetas": {}
}