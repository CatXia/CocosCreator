// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_edge: { value: 0.5 }
        u_offset: { value: 0.01 }
        edge_blur: { value: 0.01 }
        color0: { value: [1,1,1,1], editor: { type: color } }
        edge_color0: { value: [1,1,1,0], editor: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform OutlineFrag {
    float u_edge;
    float u_offset;
    float edge_blur;
  };
  uniform ColorFrag {
    vec4 color0;
    vec4 edge_color0;
  };

  vec4 drawCircle() {
    float edge = u_edge;
    float dis = 0.0;
    float offset = u_offset;
    // vec2 uv = v_uv0;
    vec2 uv = vec2(0.5 + (v_uv0.x - 0.5) * ((offset * 2.0) + 1.0), 0.5 + (v_uv0.y - 0.5) * ((offset * 2.0) + 1.0));
    if (uv.x < edge) {
      if (uv.y < edge) {
        dis = distance(uv, vec2(edge, edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2(edge, (1.0 - edge)));
      }
    } else if (uv.x > (1.0 - edge)) {
      if (uv.y < edge) {
        dis = distance(uv, vec2((1.0 - edge), edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));
      }
    }
    // 混合外边颜色
    vec4 color = color0 * texture2D(texture, uv);
    // 边缘颜色
    vec4 edge_color = color;
    // 边缘羽化
    float blur = edge_blur;

    // 如果应用贴图颜色混合
    #if USER_TEXTURE_COLOR
      edge_color = edge_color0 * texture2D(texture, uv);
    #else
      edge_color = edge_color0;
    #endif

    if (dis > 0.001) {
      // 外圈沟
      float gap = edge * blur;
      if (dis <= edge - gap) {
        color = color;
      } else if (dis <= edge) {
        // 平滑过渡：ret smoothstep(a, b, x)可以用来生产0到1的平滑过渡
        float t = smoothstep(0.0, gap, edge - dis);
        // 边缘颜色和透明度
        color = vec4(edge_color.rgb, t * edge_color.a);
      } else {
        color = vec4(edge_color.rgb, (offset - (dis - edge)) / offset);
      }
    } else {
      float absX = abs(uv.x - 0.5);
      float absY = abs(uv.y - 0.5);
      if (absX > 0.5) {
        color = vec4(edge_color.rgb, (offset - (absX - 0.5))/offset);
      } else if (absY > 0.5) {
        color = vec4(edge_color.rgb, (offset - (absY - 0.5))/offset);
      } else {
        color = color;
      }
    }
    return color;
  }

  void main () {
    vec4 o = drawCircle();
    gl_FragColor = o;
  }
}%
