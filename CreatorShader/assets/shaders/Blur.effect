/*
 * 模糊效果
 */

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        blurriness: { value: 0.05 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  // 重复次数，值越大模糊质量越高，但性能越低
  #define repeats 60.
    
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform OutlineFrag {
    // 模糊度，用户输入
    float blurriness;
  };
  // 应用贴图UV
  vec4 draw(vec2 uv) {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif
    return o;
  }

  float grid(float var, float size) {
    return floor(var * size) / size;
  }

  // 随机值
  float rand(vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
  }

  void main () {
    // 模糊贴图
    vec4 blurred_image = vec4(0.);
    //重复采样
    for (float i = 0.; i < repeats; i += 1.) {
      // 第一采样点
      vec2 q = vec2(cos(degrees((i / repeats) * 360.)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, v_uv0.x + v_uv0.y)) + blurriness);
      vec2 uv2 = v_uv0 + (q * blurriness);
      blurred_image += draw(uv2) / 2.;
      // 第二采样点
      q = vec2(cos(degrees((i / repeats) * 360.)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2., v_uv0.x + v_uv0.y + 24.)) + blurriness);
      uv2 = v_uv0 + (q * blurriness);
      blurred_image += draw(uv2) / 2.;
    }
    blurred_image /= repeats;

    gl_FragColor = vec4(blurred_image);
  }
}%
