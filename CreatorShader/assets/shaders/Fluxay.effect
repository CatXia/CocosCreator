// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        color: { value: [1,1,1,1], editor: { type: color }}
        width: { value: 0.08 }
        strength: { value: 0.008 }
        offset: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ColorFrag {
    vec4 color;
  };

  uniform OutlineFrag {
    float time;
    float width;
    float strength;
    float offset;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= color;

    float start = tan(time / 1.414);
    if (v_uv0.x < (start - offset * v_uv0.y) && v_uv0.x > (start - offset * v_uv0.y - width)) {
      vec3 improve = strength * vec3(255, 255, 255);
      vec3 result = improve * vec3(o.r, o.g, o.b);
      o = vec4(result, o.a);
    } else {
      o *= v_color;
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
