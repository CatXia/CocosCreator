{
  "ver": "1.0.25",
  "uuid": "f947757a-8d39-4967-a7bb-48432888ca6b",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float u_edge;\nuniform float u_offset;\nuniform float edge_blur;\nuniform vec4 color0;\nuniform vec4 edge_color0;\nvec4 drawCircle() {\n  float edge = u_edge;\n  float dis = 0.0;\n  float offset = u_offset;\n  vec2 uv = vec2(0.5 + (v_uv0.x - 0.5) * ((offset * 2.0) + 1.0), 0.5 + (v_uv0.y - 0.5) * ((offset * 2.0) + 1.0));\n  if (uv.x < edge) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2(edge, edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2(edge, (1.0 - edge)));\n    }\n  } else if (uv.x > (1.0 - edge)) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2((1.0 - edge), edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));\n    }\n  }\n  vec4 color = color0 * texture2D(texture, uv);\n  vec4 edge_color = color;\n  float blur = edge_blur;\n  #if USER_TEXTURE_COLOR\n    edge_color = edge_color0 * texture2D(texture, uv);\n  #else\n    edge_color = edge_color0;\n  #endif\n  if (dis > 0.001) {\n    float gap = edge * blur;\n    if (dis <= edge - gap) {\n      color = color;\n    } else if (dis <= edge) {\n      float t = smoothstep(0.0, gap, edge - dis);\n      color = vec4(edge_color.rgb, t * edge_color.a);\n    } else {\n      color = vec4(edge_color.rgb, (offset - (dis - edge)) / offset);\n    }\n  } else {\n    float absX = abs(uv.x - 0.5);\n    float absY = abs(uv.y - 0.5);\n    if (absX > 0.5) {\n      color = vec4(edge_color.rgb, (offset - (absX - 0.5))/offset);\n    } else if (absY > 0.5) {\n      color = vec4(edge_color.rgb, (offset - (absY - 0.5))/offset);\n    } else {\n      color = color;\n    }\n  }\n  return color;\n}\nvoid main () {\n  vec4 o = drawCircle();\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform OutlineFrag {\n  float u_edge;\n  float u_offset;\n  float edge_blur;\n};\nuniform ColorFrag {\n  vec4 color0;\n  vec4 edge_color0;\n};\nvec4 drawCircle() {\n  float edge = u_edge;\n  float dis = 0.0;\n  float offset = u_offset;\n  vec2 uv = vec2(0.5 + (v_uv0.x - 0.5) * ((offset * 2.0) + 1.0), 0.5 + (v_uv0.y - 0.5) * ((offset * 2.0) + 1.0));\n  if (uv.x < edge) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2(edge, edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2(edge, (1.0 - edge)));\n    }\n  } else if (uv.x > (1.0 - edge)) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2((1.0 - edge), edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));\n    }\n  }\n  vec4 color = color0 * texture2D(texture, uv);\n  vec4 edge_color = color;\n  float blur = edge_blur;\n  #if USER_TEXTURE_COLOR\n    edge_color = edge_color0 * texture2D(texture, uv);\n  #else\n    edge_color = edge_color0;\n  #endif\n  if (dis > 0.001) {\n    float gap = edge * blur;\n    if (dis <= edge - gap) {\n      color = color;\n    } else if (dis <= edge) {\n      float t = smoothstep(0.0, gap, edge - dis);\n      color = vec4(edge_color.rgb, t * edge_color.a);\n    } else {\n      color = vec4(edge_color.rgb, (offset - (dis - edge)) / offset);\n    }\n  } else {\n    float absX = abs(uv.x - 0.5);\n    float absY = abs(uv.y - 0.5);\n    if (absX > 0.5) {\n      color = vec4(edge_color.rgb, (offset - (absX - 0.5))/offset);\n    } else if (absY > 0.5) {\n      color = vec4(edge_color.rgb, (offset - (absY - 0.5))/offset);\n    } else {\n      color = color;\n    }\n  }\n  return color;\n}\nvoid main () {\n  vec4 o = drawCircle();\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}