{
  "ver": "1.0.25",
  "uuid": "dd40e433-72bb-4d4d-97cd-84469f51ba4f",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nvarying vec3 v_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_position = a_position;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float u_edge;\nvoid main () {\n  float edge = u_edge;\n  float dis = 0.0;\n  vec2 uv = v_uv0;\n  if (uv.x < edge) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2(edge, edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2(edge, (1.0 - edge)));\n    }\n  } else if (uv.x > (1.0 - edge)) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2((1.0 - edge), edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));\n    }\n  }\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float gap = edge * 0.1;\n  if (dis <= edge - gap) {\n    o = o;\n  } else if (dis <= edge) {\n    float t = smoothstep(0.,gap,edge-dis);\n    o = vec4(o.rgb,t * o.a);\n  } else {\n    o = vec4(o.rgb, 0.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nout vec3 v_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_position = a_position;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform OutlineFrag {\n  float u_edge;\n};\nvoid main () {\n  float edge = u_edge;\n  float dis = 0.0;\n  vec2 uv = v_uv0;\n  if (uv.x < edge) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2(edge, edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2(edge, (1.0 - edge)));\n    }\n  } else if (uv.x > (1.0 - edge)) {\n    if (uv.y < edge) {\n      dis = distance(uv, vec2((1.0 - edge), edge));\n    } else if (uv.y > (1.0 - edge)) {\n      dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));\n    }\n  }\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float gap = edge * 0.1;\n  if (dis <= edge - gap) {\n    o = o;\n  } else if (dis <= edge) {\n    float t = smoothstep(0.,gap,edge-dis);\n    o = vec4(o.rgb,t * o.a);\n  } else {\n    o = vec4(o.rgb, 0.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}