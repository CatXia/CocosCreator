// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_edge: { value: 0.5 }
        edge_blur: { value: 0.01 }
        color0: { value: [1,1,1,1], editor: { type: color } }
        edge_color0: { value: [1,1,1,0], editor: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform OutlineFrag {
    float u_edge;
    float edge_blur;
  };
  
  uniform ColorFrag {
    vec4 color0;
    vec4 edge_color0;
  };

  vec4 drawCircle () {
    float edge = u_edge;
    float dis = 0.0;
    vec2 uv = v_uv0;
    if (uv.x < edge) {
      if (uv.y < edge) {
        dis = distance(uv, vec2(edge, edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2(edge, (1.0 - edge)));
      }
    } else if (uv.x > (1.0 - edge)) {
      if (uv.y < edge) {
        dis = distance(uv, vec2((1.0 - edge), edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));
      }
    }
    // 混合外边颜色
    vec4 color = color0 * texture2D(texture,uv);
    // 边缘颜色
    vec4 edge_color = color;
    // 边缘羽化,默认0.01,减少抗锯齿
    float blur = edge_blur;

      // 如果有外部颜色,重新定义 边缘颜色
      #if USE_EDGE_COLOR
        // 如果应用贴图颜色混合
        #if USER_TEXTURE_COLOR
          edge_color = edge_color0  * texture2D(texture,uv);
        #else
          edge_color = edge_color0;
        #endif
      #endif
        
      if(dis > 0.001)
      {
        // 外圈沟
        float gap = edge * blur;
        if (dis <= edge - gap) {
            color = color;
        } else if (dis <= edge) {
          // 平滑过渡: ret smoothstep(a, b, x) 可以用来生成0到1的平滑过渡.
          float t = smoothstep(0.,gap,edge-dis);
            
          // 边缘颜色和透明度
          color = vec4(edge_color.rgb,t * edge_color.a);
        } else {
          // 隐藏不要的部分
          color = vec4(edge_color.rgb,0.); 
        }
      } else {
        color =  color;
      }
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
