{
  "ver": "1.0.25",
  "uuid": "7689bef7-1615-4973-a8fa-3dda19c04a36",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float blurriness;\nvec4 draw(vec2 uv) {\n  return texture2D(texture, uv).rgba;\n}\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid main () {\n  vec4 blurred_image = vec4(0.);\n  for (float i = 0.; i < 60.; i += 1.) {\n    vec2 q = vec2(cos(degrees((i / 60.) * 360.)), sin(degrees((i / 60.) * 360.0))) * (rand(vec2(i, v_uv0.x + v_uv0.y)) + blurriness);\n    vec2 uv2 = v_uv0 + (q * blurriness);\n    blurred_image += draw(uv2) / 2.;\n    q = vec2(cos(degrees((i / 60.) * 360.)), sin(degrees((i / 60.) * 360.0))) * (rand(vec2(i + 2., v_uv0.x + v_uv0.y + 24.)) + blurriness);\n    uv2 = v_uv0 + (q * blurriness);\n    blurred_image += draw(uv2) / 2.;\n  }\n  blurred_image /= 60.;\n  gl_FragColor = vec4(blurred_image);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform OutlineFrag {\n  float blurriness;\n};\nvec4 draw(vec2 uv) {\n  return texture2D(texture, uv).rgba;\n}\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid main () {\n  vec4 blurred_image = vec4(0.);\n  for (float i = 0.; i < 60.; i += 1.) {\n    vec2 q = vec2(cos(degrees((i / 60.) * 360.)), sin(degrees((i / 60.) * 360.0))) * (rand(vec2(i, v_uv0.x + v_uv0.y)) + blurriness);\n    vec2 uv2 = v_uv0 + (q * blurriness);\n    blurred_image += draw(uv2) / 2.;\n    q = vec2(cos(degrees((i / 60.) * 360.)), sin(degrees((i / 60.) * 360.0))) * (rand(vec2(i + 2., v_uv0.x + v_uv0.y + 24.)) + blurriness);\n    uv2 = v_uv0 + (q * blurriness);\n    blurred_image += draw(uv2) / 2.;\n  }\n  blurred_image /= 60.;\n  gl_FragColor = vec4(blurred_image);\n}"
      }
    }
  ],
  "subMetas": {}
}