// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        factor: { value: 0.6 }
        width: { value: 0.02 }
        color: { value: [10.0, 10.0, 10.0, 1.0], editor: {type : color}}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform IN_PUT_VALUE {
    float factor;
    float width;
    float time;
  };
  uniform IN_PUT_COLOR {
    vec4 color;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    float distance = abs(v_uv0.x + v_uv0.y - tan(time)) / 1.414;
    distance = 1.0 - (1.0 / width) * distance;
    distance = max(distance, 0.0);
    vec4 sample = vec4(0.0, 0.0, 0.0, 0.0);
    sample[0] = color[0] * distance;
    sample[1] = color[1] * distance;
    sample[2] = color[2] * distance;
    sample[3] = distance;

    float alpha = sample[3] * o[3];
    o[0] = o[0] + sample[0] * alpha * factor;
    o[1] = o[1] + sample[1] * alpha * factor;
    o[2] = o[2] + sample[2] * alpha * factor;
    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
