// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        iResolution: { value: [1280, 720] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform IN_PUT_POSITION {
    vec2 iResolution;
  };

  void main () {
    vec2 onePixel = vec2(1.0 / iResolution.x, 1.0 / iResolution.y);

    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif
    vec4 colorRight = texture2D(texture, v_uv0.xy + vec2(0,onePixel.t));
    vec4 colorBottom = texture2D(texture, v_uv0.xy + vec2(onePixel.s,0));

    o.r = 3.0* sqrt( (o.r - colorRight.r) * (o.r - colorRight.r) + (o.r - colorBottom.r) * (o.r - colorBottom.r) );
    o.g = 3.0* sqrt( (o.g - colorRight.g) * (o.g - colorRight.g) + (o.g - colorBottom.g) * (o.g - colorBottom.g) );
    o.b = 3.0* sqrt( (o.b - colorRight.b) * (o.b - colorRight.b) + (o.b - colorBottom.b) * (o.b - colorBottom.b) );

    o.r >1.0 ? 1.0 : o.r;
    o.g >1.0 ? 1.0 : o.g;
    o.b >1.0 ? 1.0 : o.b;

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
