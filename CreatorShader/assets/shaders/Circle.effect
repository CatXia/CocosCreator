// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_edge: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  out vec3 v_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    v_position = a_position;
    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform OutlineFrag {
    float u_edge;
  };

  void main () {
    float edge = u_edge;
    float dis = 0.0;
    vec2 uv = v_uv0;
    
    if (uv.x < edge) {
      if (uv.y < edge) {
        dis = distance(uv, vec2(edge, edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2(edge, (1.0 - edge)));
      }
    } else if (uv.x > (1.0 - edge)) {
      if (uv.y < edge) {
        dis = distance(uv, vec2((1.0 - edge), edge));
      } else if (uv.y > (1.0 - edge)) {
        dis = distance(uv, vec2((1.0 - edge), (1.0 - edge)));
      }
    }
    // dis = distance(uv, vec2(edge, edge));

    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
    float gap = edge * 0.1;
    if (dis <= edge - gap) {
      o = o;
    } else if (dis <= edge) {
      float t = smoothstep(0.,gap,edge-dis);
      o = vec4(o.rgb,t * o.a);
    } else {
      o = vec4(o.rgb, 0.0);
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
